package bridge.model.score;

import bridge.model.player.Team;

public class Vulnerability {

	private static final Type RED = new Red();
	private static final Type BLACK = new Black();

	private final Type ns;
	private final Type ew;

	public Vulnerability(Type ns, Type ew) {
		this.ns = ns;
		this.ew = ew;
	}

	public Type get(Team team) {
		switch(team) {
			case NORTH_SOUTH: return ns;
			case EAST_WEST: return ew;
			default: return null;
		}
	}

	public static abstract class Type {
		public abstract int getGrandSlamBonus();
		public abstract int getSmallSlamBonus();
		public abstract int getGameBonus();
		public abstract int getPenalty(int tricks);
		public abstract int getDoubledPenalty(int tricks);
		public abstract int getRedoubledPenalty(int tricks);
		public abstract int getDoubledOvertricks(int tricks);
		public abstract int getRedoubledOvertricks(int tricks);
	}

	public static class Red extends Type {

		private Red() {

		}

		@Override public int getGrandSlamBonus() {
			return 1500;
		}

		@Override public int getSmallSlamBonus() {
			return 750;
		}

		@Override public int getGameBonus() {
			return 500;
		}

		@Override public int getPenalty(int tricks) {
			return 100 * tricks;
		}

		@Override public int getDoubledPenalty(int tricks) {
			int total = 0;
			for(int i=0; i<tricks; i++) {
				if(i == 0)
					total += 200;
				else
					total += 300;
			}
			return total;
		}

		@Override public int getRedoubledPenalty(int tricks) {
			return 2 * getDoubledPenalty(tricks);
		}

		@Override public int getDoubledOvertricks(int tricks) {
			return 200 * tricks;
		}

		@Override public int getRedoubledOvertricks(int tricks) {
			return 400 * tricks;
		}
	}

	public static class Black extends Type {

		private Black() {

		}

		@Override public int getGrandSlamBonus() {
			return 1000;
		}

		@Override public int getSmallSlamBonus() {
			return 500;
		}

		@Override public int getGameBonus() {
			return 300;
		}

		@Override public int getPenalty(int tricks) {
			return 50 * tricks;
		}

		@Override public int getDoubledPenalty(int tricks) {
			int total = 0;
			for(int i=0; i<tricks; i++) {
				if(i == 0)
					total += 100;
				else if(i == 1 || i == 2)
					total += 200;
				else 
					total += 300;
			}
			return total;
		}

		@Override public int getRedoubledPenalty(int tricks) {
			return 2 * getDoubledPenalty(tricks);
		}

		@Override public int getDoubledOvertricks(int tricks) {
			return 100 * tricks;
		}

		@Override public int getRedoubledOvertricks(int tricks) {
			return 200 * tricks;
		}
	}
}